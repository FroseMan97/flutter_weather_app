// Mocks generated by Mockito 5.4.0 from annotations
// in packages/weather_domain/test/usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_domain/weather_domain.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class


/// A class which mocks [CitiesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCitiesRepository extends _i1.Mock implements _i2.CitiesRepository {
  MockCitiesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.City>> searchCities(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchCities,
          [query],
        ),
        returnValue: _i3.Future<List<_i2.City>>.value(<_i2.City>[]),
      ) as _i3.Future<List<_i2.City>>);
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i2.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Weather> getCurrentWeather(
    String? cityName,
    String? locale,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeather,
          [
            cityName,
            locale,
          ],
        ),
        returnValue: _i3.Future<_i2.Weather>.value(_FakeWeather_2(
          this,
          Invocation.method(
            #getCurrentWeather,
            [cityName, locale],
          ),
        )),
      ) as _i3.Future<_i2.Weather>);
}

class _FakeWeather_2 extends _i1.SmartFake implements _i2.Weather {
  _FakeWeather_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}
