// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_weather_app/test/features/cities/data/repositories/cities_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_weather_app/core/data/datasources/cities_local_datasource.dart' as _i4;
import 'package:flutter_weather_app/core/data/datasources/cities_remote_datasource.dart' as _i5;
import 'package:flutter_weather_app/core/data/models/city_model.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class


/// A class which mocks [CitiesRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCitiesRemoteDataSource extends _i1.Mock implements _i5.CitiesRemoteDataSource {
  MockCitiesRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<List<_i6.CityData>> searchCities(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchCities,
          [query],
        ),
        returnValue: _i3.Future<List<_i6.CityData>>.value(<_i6.CityData>[]),
      ) as _i3.Future<List<_i6.CityData>>);
}

/// A class which mocks [CitiesLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCitiesLocalDataSource extends _i1.Mock implements _i4.CitiesLocalDataSource {
  MockCitiesLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<List<_i6.CityData>> getCachedCities(String? query) => (super.noSuchMethod(
        Invocation.method(
          #getCachedCities,
          [query],
        ),
        returnValue: _i3.Future<List<_i6.CityData>>.value(<_i6.CityData>[]),
      ) as _i3.Future<List<_i6.CityData>>);

  @override
  Future<void> cacheCities(String? query, List<_i6.CityData>? cities) => (super.noSuchMethod(
        Invocation.method(
          #cacheCities,
          [query, cities],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}